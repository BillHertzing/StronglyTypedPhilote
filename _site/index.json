{
  "ApiDocumentation/ATAP.Utilities.Collection.Extensions.html": {
    "href": "ApiDocumentation/ATAP.Utilities.Collection.Extensions.html",
    "title": "Class Extensions | StronglyTypedPhilote",
    "keywords": "Class Extensions Inheritance System.Object Extensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : ATAP.Utilities.Collection Assembly : cs.temp.dll.dll Syntax public static class Extensions Methods AddRange<T>(ICollection<T>, IEnumerable<T>) Declaration public static void AddRange<T>(this ICollection<T> collection, IEnumerable<T> enumerable) Parameters Type Name Description System.Collections.Generic.ICollection <T> collection System.Collections.Generic.IEnumerable <T> enumerable Type Parameters Name Description T AddRange<TValue>(IList<TValue>, IEnumerable<TValue>) Declaration public static void AddRange<TValue>(this IList<TValue> source, IEnumerable<TValue> collection) Parameters Type Name Description System.Collections.Generic.IList <TValue> source System.Collections.Generic.IEnumerable <TValue> collection Type Parameters Name Description TValue AddRange<TKey, TValue>(Dictionary<TKey, TValue>, IEnumerable<KeyValuePair<TKey, TValue>>) Declaration public static void AddRange<TKey, TValue>(this Dictionary<TKey, TValue> source, IEnumerable<KeyValuePair<TKey, TValue>> collection) Parameters Type Name Description System.Collections.Generic.Dictionary <TKey, TValue> source System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> collection Type Parameters Name Description TKey TValue DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) Declaration public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source System.Func <TSource, TKey> keySelector Returns Type Description System.Collections.Generic.IEnumerable <TSource> Type Parameters Name Description TSource TKey ForEach<T>(IEnumerable<T>, Action<T>) Declaration public static void ForEach<T>(this IEnumerable<T> source, Action<T> action) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source System.Action <T> action Type Parameters Name Description T HasSingle<T>(IEnumerable<T>, out T) Declaration public static bool HasSingle<T>(this IEnumerable<T> sequence, out T value) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence T value Returns Type Description System.Boolean Type Parameters Name Description T Merge<TKey, TValue>(IEnumerable<Dictionary<TKey, TValue>>) Declaration public static Dictionary<TKey, TValue> Merge<TKey, TValue>(IEnumerable<Dictionary<TKey, TValue>> dictionaries) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.Dictionary <TKey, TValue>> dictionaries Returns Type Description System.Collections.Generic.Dictionary <TKey, TValue> Type Parameters Name Description TKey TValue Traverse<T>(T, Func<T, T>) Declaration public static IEnumerable<T> Traverse<T>(this T item, Func<T, T> childSelector) Parameters Type Name Description T item System.Func <T, T> childSelector Returns Type Description System.Collections.Generic.IEnumerable <T> Type Parameters Name Description T Traverse<T>(T, Func<T, IEnumerable<T>>) Declaration public static IEnumerable<T> Traverse<T>(this T item, Func<T, IEnumerable<T>> childSelector) Parameters Type Name Description T item System.Func <T, System.Collections.Generic.IEnumerable <T>> childSelector Returns Type Description System.Collections.Generic.IEnumerable <T> Type Parameters Name Description T Traverse<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) Declaration public static IEnumerable<T> Traverse<T>(this IEnumerable<T> items, Func<T, IEnumerable<T>> childSelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items System.Func <T, System.Collections.Generic.IEnumerable <T>> childSelector Returns Type Description System.Collections.Generic.IEnumerable <T> Type Parameters Name Description T"
  },
  "ApiDocumentation/ATAP.Utilities.Collection.html": {
    "href": "ApiDocumentation/ATAP.Utilities.Collection.html",
    "title": "Namespace ATAP.Utilities.Collection | StronglyTypedPhilote",
    "keywords": "Namespace ATAP.Utilities.Collection Classes Extensions"
  },
  "ApiDocumentation/ATAP.Utilities.Philote.DefaultConfiguration-1.html": {
    "href": "ApiDocumentation/ATAP.Utilities.Philote.DefaultConfiguration-1.html",
    "title": "Class DefaultConfiguration<T> | StronglyTypedPhilote",
    "keywords": "Class DefaultConfiguration<T> Inheritance System.Object DefaultConfiguration<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : ATAP.Utilities.Philote Assembly : cs.temp.dll.dll Syntax public static class DefaultConfiguration<T> Type Parameters Name Description T Fields Production Declaration public static IDictionary<string, IPhilote<T>> Production Field Value Type Description System.Collections.Generic.IDictionary < System.String , IPhilote <T>>"
  },
  "ApiDocumentation/ATAP.Utilities.Philote.html": {
    "href": "ApiDocumentation/ATAP.Utilities.Philote.html",
    "title": "Namespace ATAP.Utilities.Philote | StronglyTypedPhilote",
    "keywords": "Namespace ATAP.Utilities.Philote Classes DefaultConfiguration<T> InstanceFactory InstanceFactoryGeneric<TArg1, TArg2, TArg3> TypeToIgnore Interfaces IAbstractPhilote<TId, TValue> IGuidPhilote<TId> IIntPhilote<TId> IPhiloteConverterFactory<T>"
  },
  "ApiDocumentation/ATAP.Utilities.Philote.IAbstractPhilote-2.html": {
    "href": "ApiDocumentation/ATAP.Utilities.Philote.IAbstractPhilote-2.html",
    "title": "Interface IAbstractPhilote<TId, TValue> | StronglyTypedPhilote",
    "keywords": "Interface IAbstractPhilote<TId, TValue> Namespace : ATAP.Utilities.Philote Assembly : cs.temp.dll.dll Syntax public interface IAbstractPhilote<TId, TValue> where TId : IAbstractStronglyTypedId<TValue>, new() Type Parameters Name Description TId TValue Properties AdditionalIDs Declaration ConcurrentDictionary<string, IAbstractStronglyTypedId<TValue>>? AdditionalIDs { get; } Property Value Type Description System.Nullable < ConcurrentDictionary < System.String , IAbstractStronglyTypedId <TValue>>> ID Declaration TId ID { get; } Property Value Type Description TId TimeBlocks Declaration IEnumerable<ITimeBlock> TimeBlocks { get; } Property Value Type Description System.Collections.Generic.IEnumerable < ITimeBlock >"
  },
  "ApiDocumentation/ATAP.Utilities.Philote.IGuidPhilote-1.html": {
    "href": "ApiDocumentation/ATAP.Utilities.Philote.IGuidPhilote-1.html",
    "title": "Interface IGuidPhilote<TId> | StronglyTypedPhilote",
    "keywords": "Interface IGuidPhilote<TId> Inherited Members IAbstractPhilote<TId, Guid>.ID IAbstractPhilote<TId, Guid>.AdditionalIDs IAbstractPhilote<TId, Guid>.TimeBlocks Namespace : ATAP.Utilities.Philote Assembly : cs.temp.dll.dll Syntax public interface IGuidPhilote<TId> : IAbstractPhilote<TId, Guid> where TId : IAbstractStronglyTypedId<Guid>, new() Type Parameters Name Description TId"
  },
  "ApiDocumentation/ATAP.Utilities.Philote.IIntPhilote-1.html": {
    "href": "ApiDocumentation/ATAP.Utilities.Philote.IIntPhilote-1.html",
    "title": "Interface IIntPhilote<TId> | StronglyTypedPhilote",
    "keywords": "Interface IIntPhilote<TId> Inherited Members IAbstractPhilote<TId, Int32>.ID IAbstractPhilote<TId, Int32>.AdditionalIDs IAbstractPhilote<TId, Int32>.TimeBlocks Namespace : ATAP.Utilities.Philote Assembly : cs.temp.dll.dll Syntax public interface IIntPhilote<TId> : IAbstractPhilote<TId, int> where TId : IAbstractStronglyTypedId<int>, new() Type Parameters Name Description TId"
  },
  "ApiDocumentation/ATAP.Utilities.Philote.InstanceFactory.html": {
    "href": "ApiDocumentation/ATAP.Utilities.Philote.InstanceFactory.html",
    "title": "Class InstanceFactory | StronglyTypedPhilote",
    "keywords": "Class InstanceFactory Inheritance System.Object InstanceFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : ATAP.Utilities.Philote Assembly : cs.temp.dll.dll Syntax public static class InstanceFactory Methods CreateInstance(Type) Declaration public static object CreateInstance(Type type) Parameters Type Name Description System.Type type Returns Type Description System.Object CreateInstance(Type, Object[]) Declaration public static object CreateInstance(Type type, params object[] args) Parameters Type Name Description System.Type type System.Object [] args Returns Type Description System.Object CreateInstance<TArg1>(Type, TArg1) Declaration public static object CreateInstance<TArg1>(Type type, TArg1 arg1) Parameters Type Name Description System.Type type TArg1 arg1 Returns Type Description System.Object Type Parameters Name Description TArg1 CreateInstance<TArg1, TArg2>(Type, TArg1, TArg2) Declaration public static object CreateInstance<TArg1, TArg2>(Type type, TArg1 arg1, TArg2 arg2) Parameters Type Name Description System.Type type TArg1 arg1 TArg2 arg2 Returns Type Description System.Object Type Parameters Name Description TArg1 TArg2 CreateInstance<TArg1, TArg2, TArg3>(Type, TArg1, TArg2, TArg3) Declaration public static object CreateInstance<TArg1, TArg2, TArg3>(Type type, TArg1 arg1, TArg2 arg2, TArg3 arg3) Parameters Type Name Description System.Type type TArg1 arg1 TArg2 arg2 TArg3 arg3 Returns Type Description System.Object Type Parameters Name Description TArg1 TArg2 TArg3"
  },
  "ApiDocumentation/ATAP.Utilities.Philote.InstanceFactoryGeneric-3.html": {
    "href": "ApiDocumentation/ATAP.Utilities.Philote.InstanceFactoryGeneric-3.html",
    "title": "Class InstanceFactoryGeneric<TArg1, TArg2, TArg3> | StronglyTypedPhilote",
    "keywords": "Class InstanceFactoryGeneric<TArg1, TArg2, TArg3> Inheritance System.Object InstanceFactoryGeneric<TArg1, TArg2, TArg3> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : ATAP.Utilities.Philote Assembly : cs.temp.dll.dll Syntax public static class InstanceFactoryGeneric<TArg1, TArg2, TArg3> Type Parameters Name Description TArg1 TArg2 TArg3 Methods CreateInstance(Type, TArg1, TArg2, TArg3) Declaration public static object CreateInstance(Type type, TArg1 arg1, TArg2 arg2, TArg3 arg3) Parameters Type Name Description System.Type type TArg1 arg1 TArg2 arg2 TArg3 arg3 Returns Type Description System.Object"
  },
  "ApiDocumentation/ATAP.Utilities.Philote.IPhiloteConverterFactory-1.html": {
    "href": "ApiDocumentation/ATAP.Utilities.Philote.IPhiloteConverterFactory-1.html",
    "title": "Interface IPhiloteConverterFactory<T> | StronglyTypedPhilote",
    "keywords": "Interface IPhiloteConverterFactory<T> Namespace : ATAP.Utilities.Philote Assembly : cs.temp.dll.dll Syntax public interface IPhiloteConverterFactory<T> : ISerializerConverterFactory<T> Type Parameters Name Description T Methods CanConvert(Type) Declaration bool CanConvert(Type typeToConvert) Parameters Type Name Description System.Type typeToConvert Returns Type Description System.Boolean CreateConverter(Type, ISerializerOptions) Declaration ISerializerConverter<T> CreateConverter(Type T, ISerializerOptions options) Parameters Type Name Description System.Type T ISerializerOptions options Returns Type Description ISerializerConverter <T>"
  },
  "ApiDocumentation/ATAP.Utilities.Philote.JsonConverter.SystemTextJson.html": {
    "href": "ApiDocumentation/ATAP.Utilities.Philote.JsonConverter.SystemTextJson.html",
    "title": "Namespace ATAP.Utilities.Philote.JsonConverter.SystemTextJson | StronglyTypedPhilote",
    "keywords": "Namespace ATAP.Utilities.Philote.JsonConverter.SystemTextJson Classes PhiloteConverterFactory"
  },
  "ApiDocumentation/ATAP.Utilities.Philote.JsonConverter.SystemTextJson.PhiloteConverterFactory.html": {
    "href": "ApiDocumentation/ATAP.Utilities.Philote.JsonConverter.SystemTextJson.PhiloteConverterFactory.html",
    "title": "Class PhiloteConverterFactory | StronglyTypedPhilote",
    "keywords": "Class PhiloteConverterFactory Inheritance System.Object PhiloteConverterFactory Namespace : ATAP.Utilities.Philote.JsonConverter.SystemTextJson Assembly : cs.temp.dll.dll Syntax public class PhiloteConverterFactory : JsonConverterFactory Methods CanConvert(Type) Declaration public override bool CanConvert(Type typeToConvert) Parameters Type Name Description System.Type typeToConvert Returns Type Description System.Boolean CreateConverter(Type, JsonSerializerOptions) Declaration public override Json.Serialization.JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description System.Type typeToConvert JsonSerializerOptions options Returns Type Description System.Text.Json.Serialization.JsonConverter"
  },
  "ApiDocumentation/ATAP.Utilities.Philote.TypeToIgnore.html": {
    "href": "ApiDocumentation/ATAP.Utilities.Philote.TypeToIgnore.html",
    "title": "Class TypeToIgnore | StronglyTypedPhilote",
    "keywords": "Class TypeToIgnore Inheritance System.Object TypeToIgnore Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : ATAP.Utilities.Philote Assembly : cs.temp.dll.dll Syntax public class TypeToIgnore"
  },
  "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.html": {
    "href": "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.html",
    "title": "Namespace ATAP.Utilities.StronglyTypedIds | StronglyTypedPhilote",
    "keywords": "Namespace ATAP.Utilities.StronglyTypedIds Interfaces IAbstractStronglyTypedId<TValue> IGuidStronglyTypedId IIntStronglyTypedId"
  },
  "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.IAbstractStronglyTypedId-1.html": {
    "href": "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.IAbstractStronglyTypedId-1.html",
    "title": "Interface IAbstractStronglyTypedId<TValue> | StronglyTypedPhilote",
    "keywords": "Interface IAbstractStronglyTypedId<TValue> Namespace : ATAP.Utilities.StronglyTypedIds Assembly : cs.temp.dll.dll Syntax public interface IAbstractStronglyTypedId<TValue> Type Parameters Name Description TValue Properties Value Declaration TValue Value { get; } Property Value Type Description TValue"
  },
  "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.IGuidStronglyTypedId.html": {
    "href": "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.IGuidStronglyTypedId.html",
    "title": "Interface IGuidStronglyTypedId | StronglyTypedPhilote",
    "keywords": "Interface IGuidStronglyTypedId Inherited Members IAbstractStronglyTypedId<Guid>.Value Namespace : ATAP.Utilities.StronglyTypedIds Assembly : cs.temp.dll.dll Syntax public interface IGuidStronglyTypedId : IAbstractStronglyTypedId<Guid>"
  },
  "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.IIntStronglyTypedId.html": {
    "href": "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.IIntStronglyTypedId.html",
    "title": "Interface IIntStronglyTypedId | StronglyTypedPhilote",
    "keywords": "Interface IIntStronglyTypedId Inherited Members IAbstractStronglyTypedId<Int32>.Value Namespace : ATAP.Utilities.StronglyTypedIds Assembly : cs.temp.dll.dll Syntax public interface IIntStronglyTypedId : IAbstractStronglyTypedId<int>"
  },
  "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.JsonConverter.Newtonsoft.Shim.html": {
    "href": "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.JsonConverter.Newtonsoft.Shim.html",
    "title": "Namespace ATAP.Utilities.StronglyTypedIds.JsonConverter.Newtonsoft.Shim | StronglyTypedPhilote",
    "keywords": "Namespace ATAP.Utilities.StronglyTypedIds.JsonConverter.Newtonsoft.Shim Classes StronglyTypedIdJsonConverter StronglyTypedIdJsonConverter<TStronglyTypedId, TValue>"
  },
  "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.JsonConverter.Newtonsoft.Shim.StronglyTypedIdJsonConverter.html": {
    "href": "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.JsonConverter.Newtonsoft.Shim.StronglyTypedIdJsonConverter.html",
    "title": "Class StronglyTypedIdJsonConverter | StronglyTypedPhilote",
    "keywords": "Class StronglyTypedIdJsonConverter Inheritance System.Object StronglyTypedIdJsonConverter Namespace : ATAP.Utilities.StronglyTypedIds.JsonConverter.Newtonsoft.Shim Assembly : cs.temp.dll.dll Syntax public class StronglyTypedIdJsonConverter : JsonConverter Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description JsonReader reader System.Type objectType System.Object existingValue JsonSerializer serializer Returns Type Description System.Object WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description JsonWriter writer System.Object value JsonSerializer serializer"
  },
  "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.JsonConverter.Newtonsoft.Shim.StronglyTypedIdJsonConverter-2.html": {
    "href": "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.JsonConverter.Newtonsoft.Shim.StronglyTypedIdJsonConverter-2.html",
    "title": "Class StronglyTypedIdJsonConverter<TStronglyTypedId, TValue> | StronglyTypedPhilote",
    "keywords": "Class StronglyTypedIdJsonConverter<TStronglyTypedId, TValue> Inheritance System.Object StronglyTypedIdJsonConverter<TStronglyTypedId, TValue> Namespace : ATAP.Utilities.StronglyTypedIds.JsonConverter.Newtonsoft.Shim Assembly : cs.temp.dll.dll Syntax public class StronglyTypedIdJsonConverter<TStronglyTypedId, TValue> : JsonConverter<TStronglyTypedId> where TStronglyTypedId : StronglyTypedId<TValue> Type Parameters Name Description TStronglyTypedId TValue Methods ReadJson(JsonReader, Type, TStronglyTypedId, Boolean, JsonSerializer) Declaration public override TStronglyTypedId ReadJson(JsonReader reader, Type objectType, TStronglyTypedId existingValue, bool hasExistingValue, JsonSerializer serializer) Parameters Type Name Description JsonReader reader System.Type objectType TStronglyTypedId existingValue System.Boolean hasExistingValue JsonSerializer serializer Returns Type Description TStronglyTypedId WriteJson(JsonWriter, TStronglyTypedId, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, TStronglyTypedId value, JsonSerializer serializer) Parameters Type Name Description JsonWriter writer TStronglyTypedId value JsonSerializer serializer"
  },
  "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.JsonConverter.Shim.SystemTextJson.html": {
    "href": "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.JsonConverter.Shim.SystemTextJson.html",
    "title": "Namespace ATAP.Utilities.StronglyTypedIds.JsonConverter.Shim.SystemTextJson | StronglyTypedPhilote",
    "keywords": "Namespace ATAP.Utilities.StronglyTypedIds.JsonConverter.Shim.SystemTextJson Classes StronglyTypedIdJsonConverter<TStronglyTypedId, TValue> StronglyTypedIdJsonConverterFactory"
  },
  "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.JsonConverter.Shim.SystemTextJson.StronglyTypedIdJsonConverter-2.html": {
    "href": "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.JsonConverter.Shim.SystemTextJson.StronglyTypedIdJsonConverter-2.html",
    "title": "Class StronglyTypedIdJsonConverter<TStronglyTypedId, TValue> | StronglyTypedPhilote",
    "keywords": "Class StronglyTypedIdJsonConverter<TStronglyTypedId, TValue> Inheritance System.Object StronglyTypedIdJsonConverter<TStronglyTypedId, TValue> Namespace : ATAP.Utilities.StronglyTypedIds.JsonConverter.Shim.SystemTextJson Assembly : cs.temp.dll.dll Syntax public class StronglyTypedIdJsonConverter<TStronglyTypedId, TValue> : JsonConverter<TStronglyTypedId> where TStronglyTypedId : IAbstractStronglyTypedId<TValue> Type Parameters Name Description TStronglyTypedId TValue Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override TStronglyTypedId Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader System.Type typeToConvert JsonSerializerOptions options Returns Type Description TStronglyTypedId Write(Utf8JsonWriter, TStronglyTypedId, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, TStronglyTypedId value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer TStronglyTypedId value JsonSerializerOptions options"
  },
  "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.JsonConverter.Shim.SystemTextJson.StronglyTypedIdJsonConverterFactory.html": {
    "href": "ApiDocumentation/ATAP.Utilities.StronglyTypedIds.JsonConverter.Shim.SystemTextJson.StronglyTypedIdJsonConverterFactory.html",
    "title": "Class StronglyTypedIdJsonConverterFactory | StronglyTypedPhilote",
    "keywords": "Class StronglyTypedIdJsonConverterFactory Inheritance System.Object StronglyTypedIdJsonConverterFactory Namespace : ATAP.Utilities.StronglyTypedIds.JsonConverter.Shim.SystemTextJson Assembly : cs.temp.dll.dll Syntax public class StronglyTypedIdJsonConverterFactory : JsonConverterFactory Methods CanConvert(Type) Declaration public override bool CanConvert(Type typeToConvert) Parameters Type Name Description System.Type typeToConvert Returns Type Description System.Boolean CreateConverter(Type, JsonSerializerOptions) Declaration public override Json.Serialization.JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description System.Type typeToConvert JsonSerializerOptions options Returns Type Description System.Text.Json.Serialization.JsonConverter"
  },
  "ApiDocumentation/index.html": {
    "href": "ApiDocumentation/index.html",
    "title": "Api Documentation for the library | StronglyTypedPhilote",
    "keywords": "Api Documentation for the library Generated from the triple-slash \\\\\\ comments found in the source code. The code works for TargetFramework of net5.0, netstandard2.1, and net47 documentation only built against the net5.0 TargetFramework"
  },
  "index.html": {
    "href": "index.html",
    "title": "Landing page (index.md processed by docFx into index.html) for StronglyTypedPhilote | StronglyTypedPhilote",
    "keywords": "Landing page (index.md processed by docFx into index.html) for StronglyTypedPhilote Welcome to the documentation site for the StronglyTypedPhilote repository. This site contains information on building, testing and using the StronglyTypedPhilote classes and methods. It also has concept documentation on how the assemblies are expected to be used and how they are built. This repository is a training, experimentation and discussion repository, aimed at explaining and testing the concept of the abstract record StronglyTypedID and a class StronglyTypedPhilote that incorporates and extends the StronglytypedId concept. For the high-level overview of the purpose for, and the contents of, this repository, start with the repository ReadMe To get started using the code examples, see the quickStart This documentation website follows the conventions of sites built with the DocFx tool . Across the top are major sections, along the left side is a Table Of Contents (TOC) that changes per the major section content, and along the right side is a content-specific TOC that changes according to which document is being viewed. If you are new to using this repository, please start with the Getting Started guide. The code and content of this repository are under the MIT License"
  },
  "ReadMe.html": {
    "href": "ReadMe.html",
    "title": "Abstract StronglyTypedId records within another StronglyTyped record | StronglyTypedPhilote",
    "keywords": "Abstract StronglyTypedId records within another StronglyTyped record This repository focuses on the concept of a StronglyTypedId If you have not worked with this concept before, please see also Series: Using strongly-typed entity IDs to avoid primitive obsession by Andrew Lock Using C# 9 records as strongly-typed ids by Thomas Levesque Strongly typed Guid as generic struct The 'accepted' answer by Eric Lippert This repository is a small abstract of the ATAP.Utilities repository. This repository focuses on just the StronglyTypedId record type and the AbstractPhilote record type, and is built to support discussions with other OSS developers on these concepts. The type of the value of a StronglyTypedId , as found in existing systems and databases, is overwhelmingly int, Guid, or string. Conceptual operations on the StronglyTypedId are exactly the same regardless of the value's type, which makes the StronglyTypedId particularly suited for implementation with an Abstract Type. Furthermore, since IDs should be immutable, C# records can supply a lot of of the necessary boiler plate. Combining these, as Mssr. Levesque demonstrates, an abstract record makes a good choice as the base implementation of the StronglyTypedId type. For this repository, I have renamed Mssr. Lavesque's StronglyTypedId to AbstractStronglyTypedId<TValue> to help me reason abou the code. adding the word 'Abstract' reminds me that iit cannot be used as a concrete implementation. The AbstractStronglyTypedId<TValue> and any type that derives from it needs: 1) to override ToString() 1) to be able to be serialized/deserialized 1) to be able to be written/read from a databases 1) to provide the above capabilities in a secure and efficient manner Previously, the ATAP repositories / libraries have used a struct, not a class, for their implementation of StronglyTypedId (see the answer to this StackOverflow question Strongly typed Guid as generic struct from Eric Lippert, and used the ServiceStack JSON serializers/deserializers to implement a JsonConverter for this type. This repository focuses on ensuring the previous Guid StronglyTypedId struct can be replaced in the ATAP.Utilities repository by extending Mssr. Levesque's code to ensure the (renamed) record type AbstractStronglyTypedId<TValue> and corresponding interface IAbstractStronglyTypedId<TValue> can be serialized and deserialized correctly. This repository includes code to ensure that IEnumerable<AbstractStronglyTypedId<TValue>> , Dictionary<string, AbstractStronglyTypedId<TValue>> , and ConcurrentDictionary<string, AbstractStronglyTypedId<TValue>> will serialize and deserialize correctly, and that IEnumerable<IAbstractStronglyTypedId<TValue>> , Dictionary<string, IAbstractStronglyTypedId<TValue>> , and ConcurrentDictionary<string, IAbstractStronglyTypedId<TValue>> will serialize correctly . Deserialization of the interfaces does NOT work, because C# does not support deserialization of inherited interfaces. There is currently a roadmap item to investigate/implement a way to deserialize into an appropriate interface. Serialization libraries In the ATAP.Utilities repository, the choice of a specific serializer library is deferred until runtime, and controlled by a configuration setting. Unit tests there use a Fixture which implements a DI container NInject and supplies an ISerializer service. Newtonsoft , System.Text.Json , and (soon, tbd, ServiceStack ) are the specific implementation instances that supply the runtime service. Contrasting that, in this repository and for simplicity, System.Text.Json and Newtonsoft serializers for AbstractStronglyTypedId<TValue> are implemented using individual hard-coded fixtures. Unit Tests are duplicated to use each Fixture, which results in files and classes having names ending in UnitTestsNewtonsoft001 and UnitTestsSystemTextJson001 I'm looking for a better solution so that the Unit tests only have to be written once, and can be run against multiple fixtures each of which directly incorporates a single serialization library. Issue #4 addresses this enhancement in detail. The ATAP.Utilities has a working dynamic loader that will load a serialization library at runtime and inject it into a DI-container. Issue #5 addresses an enhancement to this repository that will incorporate the dynamic loader and runtime-loaded serialization library testing to ensure the code here works with a dynamically loaded serialization library. Issue #6 address implementation of a shim package for ServiceStack so the `AbstractStronglyTypedId<TValue> and Philote can be used with that serialization library. Unit tests for the AbstractStronglyTypedId<TValue> In Mssr. Levesque's work, he uses ProductID and OrderId as examples of concrete types for the abstract StronglyTypedId . In this repository, I've used GuidStronglyTypedId and IntStronglyTypedId as concrete records that implement Mssr. Levesque's abstract record. There are Unit Tests for int and Guid concrete records, testing the TypeConverter methods. There are tests for the Serializer , testing the Serialize and Deserialize methods. There are tests of the ToString() method. The ToString() tests use the Invariant culture. Currently the TypeConverters work, The JSON serializers/deserializers for System.text.Json work for StronglyTypedId<TValue> and IStronglyTypedId<TValue> . The JSON serializers/deserializers for Newtonsoft and it's Unit Tests are currently in development. AbstractPhilote<TId, TValue> This repository also defines an abstract generic record AbstractPhilote<TId, TValue> . The full definition includes constraints on the generic type parameters, where TId : AbstractStronglyTypedId<TValue>, new() where TValue : notnull The AbstractPhilote<TId, TValue> record contains an ID auto-implemented property of type StronglyTypedId<TValue> , an auto-implemented property AdditionalIDs of type ConcurrentDictionary<string,StronglyTypedId<TValue> for aliases and an auto-implemented property TimeBlocks of type IEnumerable<ITimeBlock> for timestamps. I'm using the time/date library TimePeriodLibrary.NET by Jani Giannoudisr from GitHub for rich timestamp features. The constructors for the base class must be able to return an instance of a TId type variable. This s simple if the TValue is int . But the Guid type does not have a new(). Instead the base class constructor uses Activator.CreateInstance Alternative by Trenki. This code replaces the Activator.CreateInstance with classes that use Compiled Expression Trees. Not only does it allow the creation of the ID auto-property, it does so faster than the Reflection-based static method, and caches the instance factory for the TId . When a Philote is added to a class as a field or property, it is expected that the first generic type parameter is an implementation of StronglyTypedID<TValue> , as indicated by the constraint where TId : AbstractStronglyTypedId<TValue>, , and furthermore it must have a new() constructor as indicated by the new() in the constraint. this ensures the Deserializer can create a new instances. The second generic type parameter TValue is passed along to the implementation of the TId<TValue> . During runtime, a choice has to be made between int or Guid for the runtime type of TValue . The JSON serializers/deserializers for a Philote, using either Newtonsoft or Systrem.Text.Json and all related Unit Tests are currently in development. Attributions Strongly typed Guid as generic struct Answer as provided by Eric Lippert, Series: Using strongly-typed entity IDs to avoid primitive obsession by Andrew Lock Using C# 9 records as strongly-typed ids by Thomas Levesque Time Period Library for .NET by Jani Giannoudisr"
  },
  "SolutionDocumentation/Attributions.html": {
    "href": "SolutionDocumentation/Attributions.html",
    "title": "Attributions to other Authors | StronglyTypedPhilote",
    "keywords": "Attributions to other Authors Lippert Lavesque"
  },
  "SolutionDocumentation/Index.html": {
    "href": "SolutionDocumentation/Index.html",
    "title": "| StronglyTypedPhilote",
    "keywords": "Landing page for Solution Documentation"
  },
  "SolutionDocumentation/StronglyTypedPhiloteQuickStart.html": {
    "href": "SolutionDocumentation/StronglyTypedPhiloteQuickStart.html",
    "title": "QuickStart! | StronglyTypedPhilote",
    "keywords": "QuickStart!"
  }
}