<Project>

  <!-- ItemGroup for automatically generating Designer files and embedding resources in an assembly -->
  <!-- Attribution: https://stackoverflow.com/questions/46584499/how-to-add-a-glob-for-resx-files-for-new-sdk-csproj-file -->
  <!-- ToDo: Make the Generator Value conditional, if run under VS, use PublicResXFileCodeGenerator or ResXFileCodeGenerator.
          if not run under CS (for example dotnet build or dotnet msbuild, use resgen.exe)
  -->
  <ItemGroup>
    <Resx Include="**\*.resx" />
    <EmbeddedResource Include="**\*.resource" />

    <!--
    <Compile Include="**\*.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>$([System.String]::Copy('%(FileName)').Replace('.Designer', '.resx'))</DependentUpon>
    </Compile>
        -->
  </ItemGroup>

  <!-- It appears that there is no solution for building/embedding resources in the dotnet toolchain for V5.0-->
  <!--
  </ItemGroup>
  <Target Name="Resources" BeforeTargets="Compile">
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Text="_TargetFrameworks = @(_TargetFrameworks -> '%(Identity)')" />
    <ItemGroup>
      <_TargetFrameworks Include="$(TargetFrameworks.Split(';'))" />
    </ItemGroup>
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Text="_TargetFrameworks = @(_TargetFrameworks -> '%(Identity)')" />
    <ItemGroup>
      <_IntermediateOutputPathPlusTargetFramework Include="@(_TargetFrameworks -> '$(IntermediateOutputPath)%(Identity)')" />
    </ItemGroup>
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Text="testStr =  'testStr'" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Text="testStrReplace =  $([System.String]::Copy('testStr').Replace('test','replace'))" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Text="_IntermediateOutputPathPlusTargetFramework = @(_IntermediateOutputPathPlusTargetFramework->'%(Identity)')" />
    -->
  <!-- ToDo: Add Runtime Identifier -->
  <!--
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Text="ListOfResxFiles = @(Resx)" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Text="ListOfDesignerFiles = @(Resx -> '%(Identity)')" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Text="ListOfDesignerFiles = @(Resx -> $([System.String]::Copy('%(Resx.Identity)').Replace('resx','Generated.cs'))" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Text="OutputResources = @(Resx->'$(IntermediateOutputPath)%(TargetFrameworks)%(FileName).resources')" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Text="OutputResources = @($([System.String]::Copy('%(Resx.Identity)').Replace('.resx', '.resource')))" />
    <PropertyGroup>
    <SingleResxFile>Resources/DebugMessages.resx</SingleResxFile>
    <SingleResourceFile>Resources/ATAP.Services.GenerateProgram.DebugMessages.resources</SingleResourceFile>
    <SingleStronglyTypedFilename>Resources/ATAP.Services.GenerateProgram.DebugMessages.GeneratedStronglyTypedFile.cs</SingleStronglyTypedFilename>
    <StronglyTypedNamespace>ATAP.Services.GenerateProgram</StronglyTypedNamespace>
    <StronglyTypedClassName>DebugMessages</StronglyTypedClassName>
    </PropertyGroup>
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Text="SingleResxFile = $(SingleResxFile); SingleResourceFile = $(SingleResourceFile); SingleStronglyTypedFilename = $(SingleStronglyTypedFilename)" />
    <GenerateResource Condition="Exists('$(SingleResxFile)')" Sources="$(SingleResxFile)" OutputResources="$(SingleResourceFile)" PublicClass="true" StronglyTypedLanguage="C#"
       StronglyTypedNamespace = '$(StronglyTypedNamespace)'
       StronglyTypedClassName = '$(StronglyTypedClassName)'
       StronglyTypedFilename = '$(SingleStronglyTypedFilename)'
       >
      <Output TaskParameter="OutputResources" ItemName="Resources" />
      <Output TaskParameter="FilesWritten" ItemName="FileWrites" />
    </GenerateResource>
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Text="OutputResources = @(Resources)" />
    <Message Condition="'$(ATAPBuildToolingConfiguration)'=='Debug'" Text="FilesWritten = @(FileWrites)" />
  </Target>
  -->

<!-- when creating Console programs or services, if they dynamically load Plugins, define where the Plugins subdirectory is located -->
    <PropertyGroup>
    <PluginsRelativeDir Condition="$(PluginsRelativeDir) == '' Or $(PluginsRelativeDir) == '*Undefined*'">Plugins\</PluginsRelativeDir>
    <PluginsDir Condition="$(PluginsDir) == '' Or $(PluginsDir) == '*Undefined*'">$(OutputPath)$(PluginsRelativeDir)</PluginsDir>
  </PropertyGroup>


  <!-- Solution-wide, copy newer .json settings files that exist in the project directory into the output directory -->
  <PropertyGroup>
    <PrepareForRunDependsOn>$(PrepareForRunDependsOn);CopyJSONSettingsFilesToOutputDirectory</PrepareForRunDependsOn>
  </PropertyGroup>
  <ItemGroup>
    <JsonSettingsFiles Include="*.json" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch(%(Filename), '[Ss]ettings.*json$'))" />
  </ItemGroup>
  <Target Name="CopyJSONSettingsFilesToOutputDirectory">
    <Copy SourceFiles="@(JsonSettingsFiles)" DestinationFolder="$(OutDir)" />
  </Target>

  <!-- Targets for multiframework and multiple Runtime Identifiers publishing courtesy of
    this stackoverflow answer https://stackoverflow.com/questions/43947599/how-to-publish-for-all-target-frameworks
    this GIST:https://gist.github.com/dasMulli/b14026437468ce4b56ef93e010f24a36
    and this issue: https://github.com/dotnet/sdk/issues/9363
   -->

  <Target Name="PublishProjectForAllRIDsIfTargetFrameworkSet" Condition=" '$(TargetFramework)' != '' and '$(RuntimeIdentifiers)' != '' and '$(RuntimeIdentifier)' == ''  ">
    <ItemGroup>
      <_PublishRuntimeIdentifier Include="$(RuntimeIdentifiers)" />
    </ItemGroup>
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="PublishAll" Properties="TargetFramework=$(TargetFramework);RuntimeIdentifier=%(_PublishRuntimeIdentifier.Identity)" />
  </Target>

  <Target Name="PublishProjectForAllFrameworksIfFrameworkUnset" Condition=" '$(TargetFramework)' == '' ">
    <ItemGroup>
      <_PublishFramework Include="$(TargetFrameworks)" />
    </ItemGroup>
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="PublishAll" Properties="TargetFramework=%(_PublishFramework.Identity)" />
  </Target>

  <Target Name="PublishProjectIfFrameworkSet" DependsOnTargets="Publish" Condition=" '$(TargetFramework)' != '' " />

  <Target Name="PublishAll" DependsOnTargets="PublishProjectIfFrameworkSet;PublishProjectForAllRIDsIfTargetFrameworkSet;PublishProjectForAllFrameworksIfFrameworkUnset" />

  <!-- Microsoft Source Link for every project -->
  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <!-- Include Roslyn Code Analysis for every project -->
   <!-- FxCopAnalyzers package has been deprecated in favor of 'Microsoft.CodeAnalysis.NetAnalyzers', hence this is now commented out -->
   <!--
  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers"></PackageReference>
  </ItemGroup>
  -->

<!-- Centrally manage package versions for all NuGet package dependencies, courtesy of https://www.strathweb.com/2018/07/solution-wide-nuget-package-version-handling-with-msbuild-15/ -->
  <ItemGroup>
    <!--Stateless lightweight StateMachine library -->
    <PackageReference Update="Stateless" Version="5.1.2" />

    <!-- QuickGraph and its dependencies -->
    <PackageReference Update="YC.QuickGraph" Version="3.7.4" />
    <PackageReference Update="DotNet.Contracts" Version="1.10.20606.1" />
    <PackageReference Update="FSharp.Core" Version="2.5.0" />
    <PackageReference Update="FSharpx.Collections.Experimental" Version="2.1.3" />

    <!-- Reactive Extensions -->
    <PackageReference Update="System.Reactive" Version="5.0.0" />

    <!-- Immutable collections -->
    <PackageReference Update="System.Collections.Immutable" Version="5.0.0" />

    <!-- ServiceStack  -->
    <PackageReference Update="ServiceStack" Version="5.11.0" />
    <!-- ServiceStack serializers and dump utility -->
    <PackageReference Update="ServiceStack.Text.EnumMemberSerializer" Version="3.0.0.50044" />
    <PackageReference Update="ServiceStack.Text" Version="5.11.0" />
    <!-- ServiceStack ORMLite and SQLServer -->
    <PackageReference Update="ServiceStack.OrmLite.Core" Version="5.11.0" />
    <PackageReference Update="ServiceStack.OrmLite.SqlServer.Core" Version="5.11.0" />
    <PackageReference Update="ServiceStack.OrmLite.MySQL.Core" Version="5.11.0" />
    <PackageReference Update="ServiceStack.OrmLite.SQLite.Core" Version="5.11.0" />
    <!-- ServiceStack HTTPClient for making HTTP calls -->
    <PackageReference Update="ServiceStack.HttpClient" Version="5.11.0" />

    <!-- Library of rich time and interval manipulation routines -->
    <PackageReference Update="TimePeriodLibrary.NET" Version="2.1.1" />

    <!-- Package to ease spawning of and communications with processes -->
    <PackageReference Update="MedallionShell" Version="1.6.2" />

    <!-- Package to use real-world Units of Measure -->
    <PackageReference Update="UnitsNet" Version="4.77.0" />

    <!-- Packages necessary to run the Net Core Generic Host and web server hosts Server -->
    <PackageReference Update="Microsoft.Extensions.Configuration" Version="5.0.0" />
    <PackageReference Update="Microsoft.Extensions.Configuration.Binder" Version="5.0.0" />
    <PackageReference Update="Microsoft.Extensions.Configuration.CommandLine" Version="5.0.0" />
    <PackageReference Update="Microsoft.Extensions.Configuration.EnvironmentVariables" Version="5.0.0" />
    <PackageReference Update="Microsoft.Extensions.Configuration.Json" Version="5.0.0" />
    <PackageReference Update="Microsoft.Extensions.Hosting" Version="5.0.0" />
    <PackageReference Update="Microsoft.Extensions.Localization" Version="5.0.0" />
    <PackageReference Update="Microsoft.Extensions.Logging" Version="5.0.0" />
    <!-- <PackageReference Update="Microsoft.AspNetCore.Hosting.Abstractions" Version="5.0.0" /> -->

    <!-- Standalone reference to Microsoft.Extensions.DependencyInjection is used by unitTest projects-->
    <PackageReference Update="Microsoft.Extensions.DependencyInjection" Version="5.0.1" />

    <!-- alternate DI container used in UnitTest projects-->
    <PackageReference Update="Ninject" Version="3.3.4" />
    <PackageReference Update="Ninject.extensions.conventions" Version="3.3.0" />

    <!-- The Serializer Libraries available (See also ServiceStack.Text) -->
    <PackageReference Update="System.Text.Json" Version="5.0.0" />
    <PackageReference Update="Newtonsoft.Json" Version="12.0.3" />

    <!-- FileIO Extension to provide file and directory Globbing requires System.IO.Abstractions -->
    <PackageReference Update="System.IO.Abstractions" Version="13.2.9" />

    <!-- Plugin Framework -->
    <PackageReference Update="McMaster.NETCore.Plugins" Version="1.3.1" />

    <!-- Packages to implement ETW logging of method entry, method exit, and exceptions -->
    <PackageReference Update="MethodBoundaryAspect.Fody" Version="2.0.138" />

    <!-- Packages used for custom build tasks -->
    <PackageReference Update="Microsoft.Build.Framework" Version="16.8.0" />
    <PackageReference Update="Microsoft.Build.Utilities.Core" Version="16.8.0" />

    <!-- Roslyn Code Analyzers -->
       <!-- FxCopAnalyzers package has been deprecated in favor of 'Microsoft.CodeAnalysis.NetAnalyzers', hence this is now commented out -->
   <!--
    <PackageReference Update="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="3.3.2"></PackageReference>
    -->

    <!-- Microsoft Source Link -->
    <PackageReference Update="Microsoft.SourceLink.GitHub" Version="1.0.0" />

    <!-- Serilog packages -->
    <PackageReference Update="Serilog" Version="2.10.0" />
    <PackageReference Update="Serilog.Settings.Configuration" Version="3.2.0-dev-00264" />
    <PackageReference Update="Serilog.Enrichers.Thread" Version="3.2.0-dev-00747" />
    <PackageReference Update="Serilog.Extensions.Logging" Version="3.0.2-dev-10281" />
    <PackageReference Update="Serilog.Exceptions" Version="6.0.0+build.159" />
    <PackageReference Update="Serilog.Sinks.Console" Version="4.0.0-dev-00839" />
    <PackageReference Update="Serilog.Sinks.Debug" Version="1.0.2-dev-00020" />
    <PackageReference Update="Serilog.Sinks.File" Version="5.0.0-dev-00905" />
    <PackageReference Update="Serilog.Sinks.Seq" Version="5.0.0-dev-00174" />
    <PackageReference Update="SerilogAnalyzer" Version="0.15.0" />

    <!-- Packages to add Serilog and SEQ as Microsoft.Extensions.Logging providers -->
    <PackageReference Update="Serilog.Extensions.Hosting" Version="4.0.0-dev-00051" />
    <PackageReference Update="Seq.Extensions.Logging" Version="6.0.0" />

    <!-- Packages to add xUnit Testing providers and extensions -->
    <PackageReference Update="Microsoft.NET.Test.Sdk" Version="16.7.1" />
    <PackageReference Update="FluentAssertions" Version="5.10.2" />
    <PackageReference Update="Moq" Version="4.15.2" />
    <PackageReference Update="Xunit.DependencyInjection" Version="7.1.0" />
    <PackageReference Update="xunit" Version="2.4.1" />
    <PackageReference Update="xunit.runner.console" Version="2.4.1" />
    <PackageReference Update="xunit.runner.visualstudio" Version="2.4.3" />
    <PackageReference Update="coverlet.collector" Version="1.3.0" />

    <!-- Packages to add xUnit Testing dotnet tool -->
    <DotNetCliToolReference Update="dotnet-xunit" Version="2.3.1" />

  </ItemGroup>

</Project>
